{"ast":null,"code":"import { all, call, fork, put, takeEvery } from '@redux-saga/core/effects';\nimport actions from './action';\nimport factories from './factory';\nfunction* watchSample1() {\n  yield takeEvery(actions.FETCH_SAMPLE_1, function* (payload) {\n    try {\n      const response = yield call(() => factories.fetchSample(payload));\n      yield put({\n        type: actions.FETCH_SAMPLE_1_SUCCESS,\n        payload: response.Data\n      });\n    } catch (error) {} finally {}\n  });\n}\nfunction* watchSample2() {\n  // console.log('====================================');\n  // console.log(\"watchSample2\");\n  // console.log('====================================');\n  yield takeEvery(actions.FETCH_SAMPLE_2, function* (payload) {\n    try {\n      const response = yield call(() => factories.updateSample(payload));\n      yield put({\n        type: actions.FETCH_SAMPLE_2_SUCCESS,\n        payload: response.Data\n      });\n    } catch (error) {} finally {}\n  });\n}\nfunction* watchGetData() {\n  yield takeEvery(actions.FETCH_GET_DATA, function* (payload) {\n    try {\n      const response = yield call(() => factories.fetchSample(payload));\n      yield put({\n        type: actions.FETCH_GET_DATA_SUCCESS,\n        payload: response.Data\n      });\n    } catch (error) {} finally {}\n  });\n}\nexport default function* AppSaga() {\n  yield all([fork(watchSample1), fork(watchSample2), fork(watchGetData)]);\n}\n_c = AppSaga;\nvar _c;\n$RefreshReg$(_c, \"AppSaga\");","map":{"version":3,"names":["all","call","fork","put","takeEvery","actions","factories","watchSample1","FETCH_SAMPLE_1","payload","response","fetchSample","type","FETCH_SAMPLE_1_SUCCESS","Data","error","watchSample2","FETCH_SAMPLE_2","updateSample","FETCH_SAMPLE_2_SUCCESS","watchGetData","FETCH_GET_DATA","FETCH_GET_DATA_SUCCESS","AppSaga","_c","$RefreshReg$"],"sources":["/Users/user/Documents/DUY IT/reactjsFMnew/src/redux/app/saga.js"],"sourcesContent":["import { all, call, fork, put, takeEvery } from '@redux-saga/core/effects';\nimport actions from './action';\nimport factories from './factory';\n\n\nfunction* watchSample1()\n{\n\n    yield takeEvery(actions.FETCH_SAMPLE_1, function* (payload)\n    {\n        \n        try {\n            const response = yield call(() =>\n                factories.fetchSample(payload),\n            );\n\n            yield put({\n                type: actions.FETCH_SAMPLE_1_SUCCESS,\n                payload: response.Data,\n            });\n          \n        } catch (error) {\n\n        } finally {\n        }\n    });\n    \n}\nfunction* watchSample2()\n{\n    // console.log('====================================');\n    // console.log(\"watchSample2\");\n    // console.log('====================================');\n    yield takeEvery(actions.FETCH_SAMPLE_2, function* (payload)\n    {\n        try {\n            const response = yield call(() =>\n                factories.updateSample(payload),\n            );\n            yield put({\n                type: actions.FETCH_SAMPLE_2_SUCCESS,\n                payload: response.Data,\n            });\n        } catch (error) {\n\n        } finally {\n        }\n    });\n}\nfunction* watchGetData(){\n    yield takeEvery(actions.FETCH_GET_DATA, function* (payload){\n        try{\n            const response = yield call(()=>\n                factories.fetchSample(payload),\n            );\n            yield put({\n                type: actions.FETCH_GET_DATA_SUCCESS,\n                payload:response.Data,\n            })\n        }catch(error){\n\n        }finally{\n\n        }\n    });\n}\nexport default function* AppSaga()\n{\n    yield all([\n        fork(watchSample1),\n        fork(watchSample2),\n        fork(watchGetData),\n    ]);\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAEC,GAAG,EAAEC,SAAS,QAAQ,0BAA0B;AAC1E,OAAOC,OAAO,MAAM,UAAU;AAC9B,OAAOC,SAAS,MAAM,WAAW;AAGjC,UAAUC,YAAYA,CAAA,EACtB;EAEI,MAAMH,SAAS,CAACC,OAAO,CAACG,cAAc,EAAE,WAAWC,OAAO,EAC1D;IAEI,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMT,IAAI,CAAC,MACxBK,SAAS,CAACK,WAAW,CAACF,OAAO,CACjC,CAAC;MAED,MAAMN,GAAG,CAAC;QACNS,IAAI,EAAEP,OAAO,CAACQ,sBAAsB;QACpCJ,OAAO,EAAEC,QAAQ,CAACI;MACtB,CAAC,CAAC;IAEN,CAAC,CAAC,OAAOC,KAAK,EAAE,CAEhB,CAAC,SAAS,CACV;EACJ,CAAC,CAAC;AAEN;AACA,UAAUC,YAAYA,CAAA,EACtB;EACI;EACA;EACA;EACA,MAAMZ,SAAS,CAACC,OAAO,CAACY,cAAc,EAAE,WAAWR,OAAO,EAC1D;IACI,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMT,IAAI,CAAC,MACxBK,SAAS,CAACY,YAAY,CAACT,OAAO,CAClC,CAAC;MACD,MAAMN,GAAG,CAAC;QACNS,IAAI,EAAEP,OAAO,CAACc,sBAAsB;QACpCV,OAAO,EAAEC,QAAQ,CAACI;MACtB,CAAC,CAAC;IACN,CAAC,CAAC,OAAOC,KAAK,EAAE,CAEhB,CAAC,SAAS,CACV;EACJ,CAAC,CAAC;AACN;AACA,UAAUK,YAAYA,CAAA,EAAE;EACpB,MAAMhB,SAAS,CAACC,OAAO,CAACgB,cAAc,EAAE,WAAWZ,OAAO,EAAC;IACvD,IAAG;MACC,MAAMC,QAAQ,GAAG,MAAMT,IAAI,CAAC,MACxBK,SAAS,CAACK,WAAW,CAACF,OAAO,CACjC,CAAC;MACD,MAAMN,GAAG,CAAC;QACNS,IAAI,EAAEP,OAAO,CAACiB,sBAAsB;QACpCb,OAAO,EAACC,QAAQ,CAACI;MACrB,CAAC,CAAC;IACN,CAAC,QAAMC,KAAK,EAAC,CAEb,CAAC,SAAO,CAER;EACJ,CAAC,CAAC;AACN;AACA,eAAe,UAAUQ,OAAOA,CAAA,EAChC;EACI,MAAMvB,GAAG,CAAC,CACNE,IAAI,CAACK,YAAY,CAAC,EAClBL,IAAI,CAACc,YAAY,CAAC,EAClBd,IAAI,CAACkB,YAAY,CAAC,CACrB,CAAC;AACN;AAACI,EAAA,GAPwBD,OAAO;AAAA,IAAAC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}